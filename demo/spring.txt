서버단 작성
1) spring framework : 웹 개발할때 주로 사용 / 설정 작업 필요 / 
2) spring boot : spring framework 간편화버전

프로젝트 생성
1. 빌드 툴 설정
build : 프로젝트 생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키기작성, 배포
ㄴ1). gradle : text 기반, <<후발 (≒maver의 개선판)
ㄴ2). maven : xml 기반,

2.spring boot version 선택 : 3.4.4
3.언어 선택
4.패키지명 : con.example.demo (자유롭게 지정 가능)
5.패키징타입 : jar(java압축파일), war(자바 웹 압축파일-jsp)
6.자바버전선택: 부트버전에 따라 선택이 달라질 수 있음
7,필요라이브러리 선택:
8.Spring Web,dev tools,thymeleaf,lombok

화면(front)단 작성 : html + css + javascript + java
1)jsp 활용 : *.jsp 
    html 코드 + java 코드 동시작성
    spring boot 에서 사용하기 위해서는 설정작업 필요

2) 템플릿 엔진 활용 : *.html
    thymeleaf, mustache, groovy, freemakerm velocity...


스프링 주요 개념

1) IoC (Inversion of Control) : 메소드나 객체의 호출작업을 개발자가 결정하는 것이 아니라 외부(spring container)에서 결정 (제어의 역전)
    class A {}
    class B {
        A obj = new A();
    }
    
    컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
    -컨테이너가 생성한 객체 : Bean
    -싱글톤 방식 (객체는 하나만 생성) 으로 객체 생성
    -@Controller, @Service, @Component

2)경로 임의로 생성
http://localhost:8080/ ==> Controller 파일의 메소드와 매핑

uri 설계
ex)게시판 개발

게시글 작성 : /borad/create
게시글 목록 : /borad/list
게시글 조회 : /borad/read
게시글 수정 : /borad/update

@GetMapping("/create")
public String method(){
    return "info";
}

http://localhost:8080/board/create 브라우저에서 요청 => 컨트롤러 응답 => templates 찾기 (templates / return 값 찾기)
=> templates / info.html 작성

@GetMapping("/update")
public void method(){

}

http://localhost:8080/board/update 브라우저에서 요청 => 컨트롤러 응답 => templates 찾기 (templates / board/update)
=> templates / board / update.html 작성